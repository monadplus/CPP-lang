* CPP lang

 [[https://github.com/monadplus/CPP-lang/actions][https://github.com/monadplus/CPP-lang/actions/workflows/test.yml/badge.svg]]

** Project

*CPP lang* is a /toy/ programming language.

It is a *static type checked* general purpose programming language.

The language is similar to C but missing lots of important features such as:

- Data structures such as structs, arrays, maps, etc.
- Memory management.
- Exceptions.
- Interaction with the OS such as filesystem operations.

The grammar of the language can be found at [[file:CPP.cf][CPP.cf]].

*** Structure

- The frontend (lexer/parser) is defined at [[file:src/CPP/Lex.x][Lex.x]] / [[file:src/CPP/Par.y][Par.y]]
- The type checker is defined at [[file:src/CPP/TypeChecker.hs][TypeChecker.hs]]
- The backend interpreter (runs on /haskell/) is defined at [[file:src/CPP/Interpreter.hs][Interpreter.hs]]
- The backend for JVM is defined at [[file:src/CPP/JVM/CodeGen.hs][JVM/CodeGenerator.hs]]

** Compile

The compiler is written in /Haskell/. You can build the compiler using both [[https://cabal.readthedocs.io/en/3.4/][Cabal]]:

#+BEGIN_SRC sh
$ cabal build
#+END_SRC

or [[https://docs.haskellstack.org/en/stable/README/][Stack]]:

#+BEGIN_SRC sh
$ cabal build
#+END_SRC

Dependencies should be automatically managed by the building tool.

Also, a [[https://nixos.org/download.html][Nix]] expression ([[file:default.nix][default.nix]]) is provided to build the compiler:

#+BEGIN_SRC sh
$ nix-env -i -A CPP
#+END_SRC

For local development you can use [[file:shell.nix][shell.nix]]:

#+BEGIN_SRC sh
$ nix-env
nix-shell> cabal build
#+END_SRC

** Run the interpreter

Have a look at the files from [[file:examples/][examples]]. All of them can be executed on the interpreter.

#+BEGIN_SRC sh
$ cabal run CPP -- <name>.cc --interpreter
#+END_SRC

** Generate a JAR

#+BEGIN_SRC sh
$ cabal run CPP -- <name>.cc --jvm
$ java -jar <name>.jar
#+END_SRC

** TODO

- [ ] =Value= should depend on =TExp=.
- [ ] The JVM backend is not properly tested.

** Credits

- [[http://www.grammaticalframework.org/ipl-book/][Implementing Programming Languages]]
